{
    "title": "Chart Values",
    "type": "object",
    "properties": {
        "global": {
            "type": "object",
            "properties": {
                "imageRegistry": {
                    "type": "string",
                    "description": "Global Docker image registry",
                    "default": ""
                },
                "imagePullSecrets": {
                    "type": "array",
                    "description": "Global Docker registry secret names as an array",
                    "default": [],
                    "items": {}
                }
            }
        },
        "nameOverride": {
            "type": "string",
            "description": "String to partially override external-dns.fullname template (will maintain the release name)",
            "default": ""
        },
        "fullnameOverride": {
            "type": "string",
            "description": "String to fully override external-dns.fullname template",
            "default": ""
        },
        "clusterDomain": {
            "type": "string",
            "description": "Kubernetes Cluster Domain",
            "default": "cluster.local"
        },
        "commonLabels": {
            "type": "object",
            "description": "Labels to add to all deployed objects",
            "default": {}
        },
        "commonAnnotations": {
            "type": "object",
            "description": "Annotations to add to all deployed objects",
            "default": {}
        },
        "extraDeploy": {
            "type": "array",
            "description": "Array of extra objects to deploy with the release (evaluated as a template).",
            "default": [],
            "items": {}
        },
        "kubeVersion": {
            "type": "string",
            "description": "Force target Kubernetes version (using Helm capabilities if not set)",
            "default": ""
        },
        "watchReleaseNamespace": {
            "type": "boolean",
            "description": "Watch only namepsace used for the release",
            "default": false
        },
        "useDaemonset": {
            "type": "boolean",
            "description": "Use ExternalDNS in Daemonset mode",
            "default": false
        },
        "image": {
            "type": "object",
            "properties": {
                "registry": {
                    "type": "string",
                    "description": "ExternalDNS image registry",
                    "default": "docker.io"
                },
                "repository": {
                    "type": "string",
                    "description": "ExternalDNS image repository",
                    "default": "bitnami/external-dns"
                },
                "tag": {
                    "type": "string",
                    "description": "ExternalDNS Image tag (immutable tags are recommended)",
                    "default": "0.13.6-debian-11-r0"
                },
                "digest": {
                    "type": "string",
                    "description": "ExternalDNS image digest in the way sha256:aa.... Please note this parameter, if set, will override the tag",
                    "default": ""
                },
                "pullPolicy": {
                    "type": "string",
                    "description": "ExternalDNS image pull policy",
                    "default": "IfNotPresent"
                },
                "pullSecrets": {
                    "type": "array",
                    "description": "ExternalDNS image pull secrets",
                    "default": [],
                    "items": {}
                }
            }
        },
        "hostAliases": {
            "type": "array",
            "description": "Deployment pod host aliases",
            "default": [],
            "items": {}
        },
        "updateStrategy": {
            "type": "object",
            "description": "update strategy type",
            "default": {}
        },
        "command": {
            "type": "array",
            "description": "Override kiam default command",
            "default": [],
            "items": {}
        },
        "args": {
            "type": "array",
            "description": "Override kiam default args",
            "default": [],
            "items": {}
        },
        "sources": {
            "type": "array",
            "description": "K8s resources type to be observed for new DNS entries by ExternalDNS",
            "default": [
                "service",
                "ingress"
            ],
            "items": {
                "type": "string"
            }
        },
        "provider": {
            "type": "string",
            "description": "DNS provider where the DNS records will be created.",
            "default": "aws"
        },
        "initContainers": {
            "type": "array",
            "description": "Attach additional init containers to the pod (evaluated as a template)",
            "default": [],
            "items": {}
        },
        "sidecars": {
            "type": "array",
            "description": "Attach additional containers to the pod (evaluated as a template)",
            "default": [],
            "items": {}
        },
        "namespace": {
            "type": "string",
            "description": "Limit sources of endpoints to a specific namespace (default: all namespaces)",
            "default": ""
        },
        "fqdnTemplates": {
            "type": "array",
            "description": "Templated strings that are used to generate DNS names from sources that don't define a hostname themselves",
            "default": [],
            "items": {}
        },
        "containerPorts": {
            "type": "object",
            "properties": {
                "http": {
                    "type": "number",
                    "description": "HTTP Container port",
                    "default": 7979
                }
            }
        },
        "combineFQDNAnnotation": {
            "type": "boolean",
            "description": "Combine FQDN template and annotations instead of overwriting",
            "default": false
        },
        "ignoreHostnameAnnotation": {
            "type": "boolean",
            "description": "Ignore hostname annotation when generating DNS names, valid only when fqdn-template is set",
            "default": false
        },
        "publishInternalServices": {
            "type": "boolean",
            "description": "Allow external-dns to publish DNS records for ClusterIP services",
            "default": false
        },
        "publishHostIP": {
            "type": "boolean",
            "description": "Allow external-dns to publish host-ip for headless services",
            "default": false
        },
        "serviceTypeFilter": {
            "type": "array",
            "description": "The service types to take care about (default: all, options: ClusterIP, NodePort, LoadBalancer, ExternalName)",
            "default": [],
            "items": {}
        },
        "akamai": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "Hostname to use for EdgeGrid auth",
                    "default": ""
                },
                "accessToken": {
                    "type": "string",
                    "description": "Access Token to use for EdgeGrid auth",
                    "default": ""
                },
                "clientToken": {
                    "type": "string",
                    "description": "Client Token to use for EdgeGrid auth",
                    "default": ""
                },
                "clientSecret": {
                    "type": "string",
                    "description": "When using the Akamai provider, `AKAMAI_CLIENT_SECRET` to set (optional)",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "Use an existing secret with key \"akamai_api_seret\" defined.",
                    "default": ""
                }
            }
        },
        "alibabacloud": {
            "type": "object",
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "When using the Alibaba Cloud provider, set `accessKeyId` in the Alibaba Cloud configuration file (optional)",
                    "default": ""
                },
                "accessKeySecret": {
                    "type": "string",
                    "description": "When using the Alibaba Cloud provider, set `accessKeySecret` in the Alibaba Cloud configuration file (optional)",
                    "default": ""
                },
                "regionId": {
                    "type": "string",
                    "description": "When using the Alibaba Cloud provider, set `regionId` in the Alibaba Cloud configuration file (optional)",
                    "default": ""
                },
                "vpcId": {
                    "type": "string",
                    "description": "Alibaba Cloud VPC Id",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "Use an existing secret with key \"alibaba-cloud.json\" defined.",
                    "default": ""
                },
                "zoneType": {
                    "type": "string",
                    "description": "Zone Filter. Available values are: public, private, or no value for both",
                    "default": ""
                }
            }
        },
        "aws": {
            "type": "object",
            "properties": {
                "credentials": {
                    "type": "object",
                    "properties": {
                        "secretKey": {
                            "type": "string",
                            "description": "When using the AWS provider, set `aws_secret_access_key` in the AWS credentials (optional)",
                            "default": ""
                        },
                        "accessKey": {
                            "type": "string",
                            "description": "When using the AWS provider, set `aws_access_key_id` in the AWS credentials (optional)",
                            "default": ""
                        },
                        "mountPath": {
                            "type": "string",
                            "description": "When using the AWS provider, determine `mountPath` for `credentials` secret",
                            "default": "/.aws"
                        },
                        "secretName": {
                            "type": "string",
                            "description": "Use an existing secret with key \"credentials\" defined.",
                            "default": ""
                        },
                        "accessKeyIDSecretRef": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Define the name of the secret that stores aws_access_key_id.",
                                    "default": ""
                                },
                                "key": {
                                    "type": "string",
                                    "description": "Define the key of the secret that stores aws_access_key_id.",
                                    "default": ""
                                }
                            }
                        },
                        "secretAccessKeySecretRef": {
                            "type": "object",
                            "properties": {
                                "name": {
                                    "type": "string",
                                    "description": "Define the name of the secret that stores aws_secret_access_key",
                                    "default": ""
                                },
                                "key": {
                                    "type": "string",
                                    "description": "Define the key of the secret that stores aws_secret_access_key",
                                    "default": ""
                                }
                            }
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "When using the AWS provider, `AWS_DEFAULT_REGION` to set in the environment (optional)",
                    "default": "us-east-1"
                },
                "zoneType": {
                    "type": "string",
                    "description": "When using the AWS provider, filter for zones of this type (optional, options: public, private)",
                    "default": ""
                },
                "assumeRoleArn": {
                    "type": "string",
                    "description": "When using the AWS provider, assume role by specifying --aws-assume-role to the external-dns daemon",
                    "default": ""
                },
                "roleArn": {
                    "type": "string",
                    "description": "Specify role ARN to the external-dns daemon",
                    "default": ""
                },
                "apiRetries": {
                    "type": "number",
                    "description": "Maximum number of retries for AWS API calls before giving up",
                    "default": 3
                },
                "batchChangeSize": {
                    "type": "number",
                    "description": "When using the AWS provider, set the maximum number of changes that will be applied in each batch",
                    "default": 1000
                },
                "zonesCacheDuration": {
                    "type": "number",
                    "description": "If the list of Route53 zones managed by ExternalDNS doesn't change frequently, cache it by setting a TTL",
                    "default": 0
                },
                "zoneTags": {
                    "type": "array",
                    "description": "When using the AWS provider, filter for zones with these tags",
                    "default": [],
                    "items": {}
                },
                "preferCNAME": {
                    "type": "string",
                    "description": "When using the AWS provider, replaces Alias records with CNAME (options: true, false)",
                    "default": ""
                },
                "evaluateTargetHealth": {
                    "type": "string",
                    "description": "When using the AWS provider, sets the evaluate target health flag (options: true, false)",
                    "default": ""
                }
            }
        },
        "azure": {
            "type": "object",
            "properties": {
                "secretName": {
                    "type": "string",
                    "description": "When using the Azure provider, set the secret containing the `azure.json` file",
                    "default": ""
                },
                "cloud": {
                    "type": "string",
                    "description": "When using the Azure provider, set the Azure Cloud",
                    "default": ""
                },
                "resourceGroup": {
                    "type": "string",
                    "description": "When using the Azure provider, set the Azure Resource Group",
                    "default": ""
                },
                "tenantId": {
                    "type": "string",
                    "description": "When using the Azure provider, set the Azure Tenant ID",
                    "default": ""
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "When using the Azure provider, set the Azure Subscription ID",
                    "default": ""
                },
                "aadClientId": {
                    "type": "string",
                    "description": "When using the Azure provider, set the Azure AAD Client ID",
                    "default": ""
                },
                "aadClientSecret": {
                    "type": "string",
                    "description": "When using the Azure provider, set the Azure AAD Client Secret",
                    "default": ""
                },
                "useWorkloadIdentityExtension": {
                    "type": "boolean",
                    "description": "When using the Azure provider, set if you use Workload Identity extension.",
                    "default": false
                },
                "useManagedIdentityExtension": {
                    "type": "boolean",
                    "description": "When using the Azure provider, set if you use Azure MSI",
                    "default": false
                },
                "userAssignedIdentityID": {
                    "type": "string",
                    "description": "When using the Azure provider with Azure MSI, set Client ID of Azure user-assigned managed identity (optional, otherwise system-assigned managed identity is used)",
                    "default": ""
                }
            }
        },
        "cloudflare": {
            "type": "object",
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "When using the Cloudflare provider, `CF_API_TOKEN` to set (optional)",
                    "default": ""
                },
                "apiKey": {
                    "type": "string",
                    "description": "When using the Cloudflare provider, `CF_API_KEY` to set (optional)",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "When using the Cloudflare provider, it's the name of the secret containing cloudflare_api_token or cloudflare_api_key.",
                    "default": ""
                },
                "email": {
                    "type": "string",
                    "description": "When using the Cloudflare provider, `CF_API_EMAIL` to set (optional). Needed when using CF_API_KEY",
                    "default": ""
                },
                "proxied": {
                    "type": "boolean",
                    "description": "When using the Cloudflare provider, enable the proxy feature (DDOS protection, CDN...) (optional)",
                    "default": true
                }
            }
        },
        "coredns": {
            "type": "object",
            "properties": {
                "etcdEndpoints": {
                    "type": "string",
                    "description": "When using the CoreDNS provider, set etcd backend endpoints (comma-separated list)",
                    "default": "http://etcd-extdns:2379"
                },
                "etcdTLS": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "When using the CoreDNS provider, enable secure communication with etcd",
                            "default": false
                        },
                        "autoGenerated": {
                            "type": "boolean",
                            "description": "Generate automatically self-signed TLS certificates",
                            "default": false
                        },
                        "secretName": {
                            "type": "string",
                            "description": "When using the CoreDNS provider, specify a name of existing Secret with etcd certs and keys",
                            "default": "etcd-client-certs"
                        },
                        "mountPath": {
                            "type": "string",
                            "description": "When using the CoreDNS provider, set destination dir to mount data from `coredns.etcdTLS.secretName` to",
                            "default": "/etc/coredns/tls/etcd"
                        },
                        "caFilename": {
                            "type": "string",
                            "description": "When using the CoreDNS provider, specify CA PEM file name from the `coredns.etcdTLS.secretName`",
                            "default": "ca.crt"
                        },
                        "certFilename": {
                            "type": "string",
                            "description": "When using the CoreDNS provider, specify cert PEM file name from the `coredns.etcdTLS.secretName`",
                            "default": "cert.pem"
                        },
                        "keyFilename": {
                            "type": "string",
                            "description": "When using the CoreDNS provider, specify private key PEM file name from the `coredns.etcdTLS.secretName`",
                            "default": "key.pem"
                        }
                    }
                }
            }
        },
        "designate": {
            "type": "object",
            "properties": {
                "username": {
                    "type": "string",
                    "description": "When using the Designate provider, specify the OpenStack authentication username. (optional)",
                    "default": ""
                },
                "password": {
                    "type": "string",
                    "description": "When using the Designate provider, specify the OpenStack authentication password. (optional)",
                    "default": ""
                },
                "applicationCredentialId": {
                    "type": "string",
                    "description": "When using the Designate provider, specify the OpenStack authentication application credential ID. This conflicts with `designate.username`. (optional)",
                    "default": ""
                },
                "applicationCredentialSecret": {
                    "type": "string",
                    "description": "When using the Designate provider, specify the OpenStack authentication application credential ID. This conflicts with `designate.password`. (optional)",
                    "default": ""
                },
                "authUrl": {
                    "type": "string",
                    "description": "When using the Designate provider, specify the OpenStack authentication Url. (optional)",
                    "default": ""
                },
                "regionName": {
                    "type": "string",
                    "description": "When using the Designate provider, specify the OpenStack region name. (optional)",
                    "default": ""
                },
                "userDomainName": {
                    "type": "string",
                    "description": "When using the Designate provider, specify the OpenStack user domain name. (optional)",
                    "default": ""
                },
                "projectName": {
                    "type": "string",
                    "description": "When using the Designate provider, specify the OpenStack project name. (optional)",
                    "default": ""
                },
                "authType": {
                    "type": "string",
                    "description": "When using the Designate provider, specify the OpenStack auth type. (optional)",
                    "default": ""
                },
                "customCAHostPath": {
                    "type": "string",
                    "description": "When using the Designate provider, use a CA file already on the host to validate Openstack APIs.  This conflicts with `designate.customCA.enabled`",
                    "default": ""
                },
                "customCA": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "When using the Designate provider, enable a custom CA (optional)",
                            "default": false
                        },
                        "content": {
                            "type": "string",
                            "description": "When using the Designate provider, set the content of the custom CA",
                            "default": ""
                        },
                        "mountPath": {
                            "type": "string",
                            "description": "When using the Designate provider, set the mountPath in which to mount the custom CA configuration",
                            "default": "/config/designate"
                        },
                        "filename": {
                            "type": "string",
                            "description": "When using the Designate provider, set the custom CA configuration filename",
                            "default": "designate-ca.pem"
                        }
                    }
                }
            }
        },
        "exoscale": {
            "type": "object",
            "properties": {
                "apiKey": {
                    "type": "string",
                    "description": "When using the Exoscale provider, `EXTERNAL_DNS_EXOSCALE_APIKEY` to set (optional)",
                    "default": ""
                },
                "apiToken": {
                    "type": "string",
                    "description": "When using the Exoscale provider, `EXTERNAL_DNS_EXOSCALE_APISECRET` to set (optional)",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "Use an existing secret with keys \"exoscale_api_key\" and \"exoscale_api_token\" defined.",
                    "default": ""
                }
            }
        },
        "digitalocean": {
            "type": "object",
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "When using the DigitalOcean provider, `DO_TOKEN` to set (optional)",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "Use an existing secret with key \"digitalocean_api_token\" defined.",
                    "default": ""
                }
            }
        },
        "google": {
            "type": "object",
            "properties": {
                "project": {
                    "type": "string",
                    "description": "When using the Google provider, specify the Google project (required when provider=google)",
                    "default": ""
                },
                "batchChangeSize": {
                    "type": "number",
                    "description": "When using the google provider, set the maximum number of changes that will be applied in each batch",
                    "default": 1000
                },
                "serviceAccountSecret": {
                    "type": "string",
                    "description": "When using the Google provider, specify the existing secret which contains credentials.json (optional)",
                    "default": ""
                },
                "serviceAccountSecretKey": {
                    "type": "string",
                    "description": "When using the Google provider with an existing secret, specify the key name (optional)",
                    "default": "credentials.json"
                },
                "serviceAccountKey": {
                    "type": "string",
                    "description": "When using the Google provider, specify the service account key JSON file. In this case a new secret will be created holding this service account (optional)",
                    "default": ""
                },
                "zoneVisibility": {
                    "type": "string",
                    "description": "When using the Google provider, fiter for zones of a specific visibility (private or public)",
                    "default": ""
                }
            }
        },
        "hetzner": {
            "type": "object",
            "properties": {
                "token": {
                    "type": "string",
                    "description": "When using the Hetzner provider, specify your token here. (required when `hetzner.secretName` is not provided. In this case a new secret will be created holding the token.)",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "When using the Hetzner provider, specify the existing secret which contains your token. Disables the usage of `hetzner.token` (optional)",
                    "default": ""
                },
                "secretKey": {
                    "type": "string",
                    "description": "When using the Hetzner provider with an existing secret, specify the key name (optional)",
                    "default": "hetzner_token"
                }
            }
        },
        "infoblox": {
            "type": "object",
            "properties": {
                "wapiUsername": {
                    "type": "string",
                    "description": "When using the Infoblox provider, specify the Infoblox WAPI username",
                    "default": "admin"
                },
                "wapiPassword": {
                    "type": "string",
                    "description": "When using the Infoblox provider, specify the Infoblox WAPI password (required when provider=infoblox)",
                    "default": ""
                },
                "gridHost": {
                    "type": "string",
                    "description": "When using the Infoblox provider, specify the Infoblox Grid host (required when provider=infoblox)",
                    "default": ""
                },
                "view": {
                    "type": "string",
                    "description": "Infoblox view",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "Existing secret name, when in place wapiUsername and wapiPassword are not required",
                    "default": ""
                },
                "domainFilter": {
                    "type": "string",
                    "description": "When using the Infoblox provider, specify the domain (optional)",
                    "default": ""
                },
                "nameRegex": {
                    "type": "string",
                    "description": "When using the Infoblox provider, specify the name regex filter (optional)",
                    "default": ""
                },
                "noSslVerify": {
                    "type": "boolean",
                    "description": "When using the Infoblox provider, disable SSL verification (optional)",
                    "default": false
                },
                "wapiPort": {
                    "type": "string",
                    "description": "When using the Infoblox provider, specify the Infoblox WAPI port (optional)",
                    "default": ""
                },
                "wapiVersion": {
                    "type": "string",
                    "description": "When using the Infoblox provider, specify the Infoblox WAPI version (optional)",
                    "default": ""
                },
                "wapiConnectionPoolSize": {
                    "type": "string",
                    "description": "When using the Infoblox provider, specify the Infoblox WAPI request connection pool size (optional)",
                    "default": ""
                },
                "wapiHttpTimeout": {
                    "type": "string",
                    "description": "When using the Infoblox provider, specify the Infoblox WAPI request timeout in seconds (optional)",
                    "default": ""
                },
                "maxResults": {
                    "type": "string",
                    "description": "When using the Infoblox provider, specify the Infoblox Max Results (optional)",
                    "default": ""
                }
            }
        },
        "linode": {
            "type": "object",
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "When using the Linode provider, `LINODE_TOKEN` to set (optional)",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "Use an existing secret with key \"linode_api_token\" defined.",
                    "default": ""
                }
            }
        },
        "ns1": {
            "type": "object",
            "properties": {
                "minTTL": {
                    "type": "number",
                    "description": "When using the ns1 provider, specify minimal TTL, as an integer, for records",
                    "default": 10
                },
                "apiKey": {
                    "type": "string",
                    "description": "When using the ns1 provider, specify the API key to use",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "Use an existing secret with key \"ns1-api-key\" defined.",
                    "default": ""
                }
            }
        },
        "oci": {
            "type": "object",
            "properties": {
                "region": {
                    "type": "string",
                    "description": "When using the OCI provider, specify the region, where your zone is located in.",
                    "default": ""
                },
                "tenancyOCID": {
                    "type": "string",
                    "description": "When using the OCI provider, specify your Tenancy OCID",
                    "default": ""
                },
                "userOCID": {
                    "type": "string",
                    "description": "When using the OCI provider, specify your User OCID",
                    "default": ""
                },
                "compartmentOCID": {
                    "type": "string",
                    "description": "When using the OCI provider, specify your Compartment OCID where your DNS Zone is located in.",
                    "default": ""
                },
                "privateKey": {
                    "type": "string",
                    "description": "When using the OCI provider, paste in your RSA private key file for the Oracle API",
                    "default": "-----BEGIN RSA PRIVATE KEY-----\n-----END RSA PRIVATE KEY-----\n"
                },
                "privateKeyFingerprint": {
                    "type": "string",
                    "description": "When using the OCI provider, put in the fingerprint of your privateKey",
                    "default": ""
                },
                "privateKeyPassphrase": {
                    "type": "string",
                    "description": "When using the OCI provider and your privateKey has a passphrase, put it in here. (optional)",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "When using the OCI provider, it's the name of the secret containing `oci.yaml` file.",
                    "default": ""
                }
            }
        },
        "ovh": {
            "type": "object",
            "properties": {
                "consumerKey": {
                    "type": "string",
                    "description": "When using the OVH provider, specify the existing consumer key. (required when provider=ovh and `ovh.secretName` is not provided.)",
                    "default": ""
                },
                "applicationKey": {
                    "type": "string",
                    "description": "When using the OVH provider with an existing application, specify the application key. (required when provider=ovh and `ovh.secretName` is not provided.)",
                    "default": ""
                },
                "applicationSecret": {
                    "type": "string",
                    "description": "When using the OVH provider with an existing application, specify the application secret. (required when provider=ovh and `ovh.secretName` is not provided.)",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "When using the OVH provider, it's the name of the secret containing `ovh_consumer_key`, `ovh_application_key` and `ovh_application_secret`. Disables usage of other `ovh`.",
                    "default": ""
                }
            }
        },
        "scaleway": {
            "type": "object",
            "properties": {
                "scwAccessKey": {
                    "type": "string",
                    "description": "When using the Scaleway provider, specify an existing access key. (required when provider=scaleway)",
                    "default": ""
                },
                "scwSecretKey": {
                    "type": "string",
                    "description": "When using the Scaleway provider, specify an existing secret key. (required when provider=scaleway)",
                    "default": ""
                }
            }
        },
        "rfc2136": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "When using the rfc2136 provider, specify the RFC2136 host (required when provider=rfc2136)",
                    "default": ""
                },
                "port": {
                    "type": "number",
                    "description": "When using the rfc2136 provider, specify the RFC2136 port (optional)",
                    "default": 53
                },
                "zone": {
                    "type": "string",
                    "description": "When using the rfc2136 provider, specify the zone (required when provider=rfc2136)",
                    "default": ""
                },
                "tsigSecret": {
                    "type": "string",
                    "description": "When using the rfc2136 provider, specify the tsig secret to enable security. (do not specify if `rfc2136.secretName` is provided.) (optional)",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "When using the rfc2136 provider, specify the existing secret which contains your tsig secret in the key \"rfc2136_tsig_secret\". Disables the usage of `rfc2136.tsigSecret` (optional)",
                    "default": ""
                },
                "tsigSecretAlg": {
                    "type": "string",
                    "description": "When using the rfc2136 provider, specify the tsig secret to enable security (optional)",
                    "default": "hmac-sha256"
                },
                "tsigKeyname": {
                    "type": "string",
                    "description": "When using the rfc2136 provider, specify the tsig keyname to enable security (optional)",
                    "default": "rfc2136_tsig_secret"
                },
                "tsigAxfr": {
                    "type": "boolean",
                    "description": "When using the rfc2136 provider, enable AFXR to enable security (optional)",
                    "default": true
                },
                "minTTL": {
                    "type": "string",
                    "description": "When using the rfc2136 provider, specify minimal TTL (in duration format) for records[ns, us, ms, s, m, h], see more <https://golang.org/pkg/time/#ParseDuration>",
                    "default": "0s"
                },
                "rfc3645Enabled": {
                    "type": "boolean",
                    "description": "When using the rfc2136 provider, extend using RFC3645 to support secure updates over Kerberos with GSS-TSIG",
                    "default": false
                },
                "kerberosConfig": {
                    "type": "string",
                    "description": "When using the rfc2136 provider with rfc3645Enabled, the contents of a configuration file for krb5 (optional)",
                    "default": ""
                },
                "kerberosUsername": {
                    "type": "string",
                    "description": "When using the rfc2136 provider with rfc3645Enabled, specify the username to authenticate with (optional)",
                    "default": ""
                },
                "kerberosPassword": {
                    "type": "string",
                    "description": "When using the rfc2136 provider with rfc3645Enabled, specify the password to authenticate with (optional)",
                    "default": ""
                },
                "kerberosRealm": {
                    "type": "string",
                    "description": "When using the rfc2136 provider with rfc3645Enabled, specify the realm to authenticate to (required when provider=rfc2136 and rfc2136.rfc3645Enabled=true)",
                    "default": ""
                }
            }
        },
        "pdns": {
            "type": "object",
            "properties": {
                "apiUrl": {
                    "type": "string",
                    "description": "When using the PowerDNS provider, specify the API URL of the server.",
                    "default": ""
                },
                "apiPort": {
                    "type": "string",
                    "description": "When using the PowerDNS provider, specify the API port of the server.",
                    "default": "8081"
                },
                "apiKey": {
                    "type": "string",
                    "description": "When using the PowerDNS provider, specify the API key of the server.",
                    "default": ""
                },
                "secretName": {
                    "type": "string",
                    "description": "When using the PowerDNS provider, specify as secret name containing the API Key",
                    "default": ""
                }
            }
        },
        "transip": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string",
                    "description": "When using the TransIP provider, specify the account name.",
                    "default": ""
                },
                "apiKey": {
                    "type": "string",
                    "description": "When using the TransIP provider, specify the API key to use.",
                    "default": ""
                }
            }
        },
        "vinyldns": {
            "type": "object",
            "properties": {
                "host": {
                    "type": "string",
                    "description": "When using the VinylDNS provider, specify the VinylDNS API host.",
                    "default": ""
                },
                "accessKey": {
                    "type": "string",
                    "description": "When using the VinylDNS provider, specify the Access Key to use.",
                    "default": ""
                },
                "secretKey": {
                    "type": "string",
                    "description": "When using the VinylDNS provider, specify the Secret key to use.",
                    "default": ""
                }
            }
        },
        "domainFilters": {
            "type": "array",
            "description": "Limit possible target zones by domain suffixes (optional)",
            "default": [],
            "items": {}
        },
        "excludeDomains": {
            "type": "array",
            "description": "Exclude subdomains (optional)",
            "default": [],
            "items": {}
        },
        "regexDomainFilter": {
            "type": "string",
            "description": "Limit possible target zones by regex domain suffixes (optional)",
            "default": ""
        },
        "regexDomainExclusion": {
            "type": "string",
            "description": "Exclude subdomains by using regex pattern (optional)",
            "default": ""
        },
        "zoneNameFilters": {
            "type": "array",
            "description": "Filter target zones by zone domain (optional)",
            "default": [],
            "items": {}
        },
        "zoneIdFilters": {
            "type": "array",
            "description": "Limit possible target zones by zone id (optional)",
            "default": [],
            "items": {}
        },
        "annotationFilter": {
            "type": "string",
            "description": "Filter sources managed by external-dns via annotation using label selector (optional)",
            "default": ""
        },
        "labelFilter": {
            "type": "string",
            "description": "Select sources managed by external-dns using label selector (optional)",
            "default": ""
        },
        "ingressClassFilters": {
            "type": "array",
            "description": "Filter sources managed by external-dns via IngressClass (optional)",
            "default": [],
            "items": {}
        },
        "managedRecordTypesFilters": {
            "type": "array",
            "description": "Filter record types managed by external-dns (optional)",
            "default": [],
            "items": {}
        },
        "dryRun": {
            "type": "boolean",
            "description": "When enabled, prints DNS record changes rather than actually performing them (optional)",
            "default": false
        },
        "triggerLoopOnEvent": {
            "type": "boolean",
            "description": "When enabled, triggers run loop on create/update/delete events in addition to regular interval (optional)",
            "default": false
        },
        "interval": {
            "type": "string",
            "description": "Interval update period to use",
            "default": "1m"
        },
        "logLevel": {
            "type": "string",
            "description": "Verbosity of the logs (options: panic, debug, info, warning, error, fatal, trace)",
            "default": "info"
        },
        "logFormat": {
            "type": "string",
            "description": "Which format to output logs in (options: text, json)",
            "default": "text"
        },
        "policy": {
            "type": "string",
            "description": "Modify how DNS records are synchronized between sources and providers (options: sync, upsert-only )",
            "default": "upsert-only"
        },
        "registry": {
            "type": "string",
            "description": "Registry method to use (options: txt, aws-sd, noop)",
            "default": "txt"
        },
        "txtPrefix": {
            "type": "string",
            "description": "When using the TXT registry, a prefix for ownership records that avoids collision with CNAME entries (optional)<CNAME record> (Mutual exclusive with txt-suffix)",
            "default": ""
        },
        "txtSuffix": {
            "type": "string",
            "description": "When using the TXT registry, a suffix for ownership records that avoids collision with CNAME entries (optional)<CNAME record>.suffix (Mutual exclusive with txt-prefix)",
            "default": ""
        },
        "txtOwnerId": {
            "type": "string",
            "description": "A name that identifies this instance of ExternalDNS. Currently used by registry types: txt & aws-sd (optional)",
            "default": ""
        },
        "forceTxtOwnerId": {
            "type": "boolean",
            "description": "(backward compatibility) When using the non-TXT registry, it will pass the value defined by `txtOwnerId` down to the application (optional)",
            "default": false
        },
        "extraArgs": {
            "type": "object",
            "description": "Extra arguments to be passed to external-dns",
            "default": {}
        },
        "extraEnvVars": {
            "type": "array",
            "description": "An array to add extra env vars",
            "default": [],
            "items": {}
        },
        "extraEnvVarsCM": {
            "type": "string",
            "description": "ConfigMap containing extra env vars",
            "default": ""
        },
        "extraEnvVarsSecret": {
            "type": "string",
            "description": "Secret containing extra env vars (in case of sensitive data)",
            "default": ""
        },
        "schedulerName": {
            "type": "string",
            "description": "Alternative scheduler",
            "default": ""
        },
        "topologySpreadConstraints": {
            "type": "array",
            "description": "Topology Spread Constraints for pod assignment",
            "default": [],
            "items": {}
        },
        "replicaCount": {
            "type": "number",
            "description": "Desired number of ExternalDNS replicas",
            "default": 1
        },
        "podAffinityPreset": {
            "type": "string",
            "description": "Pod affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": ""
        },
        "podAntiAffinityPreset": {
            "type": "string",
            "description": "Pod anti-affinity preset. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
            "default": "soft"
        },
        "nodeAffinityPreset": {
            "type": "object",
            "properties": {
                "type": {
                    "type": "string",
                    "description": "Node affinity preset type. Ignored if `affinity` is set. Allowed values: `soft` or `hard`",
                    "default": ""
                },
                "key": {
                    "type": "string",
                    "description": "Node label key to match Ignored if `affinity` is set.",
                    "default": ""
                },
                "values": {
                    "type": "array",
                    "description": "Node label values to match. Ignored if `affinity` is set.",
                    "default": [],
                    "items": {}
                }
            }
        },
        "affinity": {
            "type": "object",
            "description": "Affinity for pod assignment",
            "default": {}
        },
        "nodeSelector": {
            "type": "object",
            "description": "Node labels for pod assignment",
            "default": {}
        },
        "tolerations": {
            "type": "array",
            "description": "Tolerations for pod assignment",
            "default": [],
            "items": {}
        },
        "podAnnotations": {
            "type": "object",
            "description": "Additional annotations to apply to the pod.",
            "default": {}
        },
        "podLabels": {
            "type": "object",
            "description": "Additional labels to be added to pods",
            "default": {}
        },
        "priorityClassName": {
            "type": "string",
            "description": "priorityClassName",
            "default": ""
        },
        "secretAnnotations": {
            "type": "object",
            "description": "Additional annotations to apply to the secret",
            "default": {}
        },
        "crd": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Install and use the integrated DNSEndpoint CRD",
                    "default": false
                },
                "apiversion": {
                    "type": "string",
                    "description": "Sets the API version for the CRD to watch",
                    "default": ""
                },
                "kind": {
                    "type": "string",
                    "description": "Sets the kind for the CRD to watch",
                    "default": ""
                }
            }
        },
        "service": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Whether to create Service resource or not",
                    "default": true
                },
                "type": {
                    "type": "string",
                    "description": "Kubernetes Service type",
                    "default": "ClusterIP"
                },
                "ports": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "number",
                            "description": "ExternalDNS client port",
                            "default": 7979
                        }
                    }
                },
                "nodePorts": {
                    "type": "object",
                    "properties": {
                        "http": {
                            "type": "string",
                            "description": "Port to bind to for NodePort service type (client port)",
                            "default": ""
                        }
                    }
                },
                "clusterIP": {
                    "type": "string",
                    "description": "IP address to assign to service",
                    "default": ""
                },
                "externalIPs": {
                    "type": "array",
                    "description": "Service external IP addresses",
                    "default": [],
                    "items": {}
                },
                "externalName": {
                    "type": "string",
                    "description": "Service external name",
                    "default": ""
                },
                "loadBalancerIP": {
                    "type": "string",
                    "description": "IP address to assign to load balancer (if supported)",
                    "default": ""
                },
                "loadBalancerSourceRanges": {
                    "type": "array",
                    "description": "List of IP CIDRs allowed access to load balancer (if supported)",
                    "default": [],
                    "items": {}
                },
                "externalTrafficPolicy": {
                    "type": "string",
                    "description": "Enable client source IP preservation",
                    "default": "Cluster"
                },
                "extraPorts": {
                    "type": "array",
                    "description": "Extra ports to expose in the service (normally used with the `sidecar` value)",
                    "default": [],
                    "items": {}
                },
                "annotations": {
                    "type": "object",
                    "description": "Annotations to add to service",
                    "default": {}
                },
                "labels": {
                    "type": "object",
                    "description": "Provide any additional labels which may be required.",
                    "default": {}
                },
                "sessionAffinity": {
                    "type": "string",
                    "description": "Session Affinity for Kubernetes service, can be \"None\" or \"ClientIP\"",
                    "default": "None"
                },
                "sessionAffinityConfig": {
                    "type": "object",
                    "description": "Additional settings for the sessionAffinity",
                    "default": {}
                }
            }
        },
        "serviceAccount": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Determine whether a Service Account should be created or it should reuse a exiting one.",
                    "default": true
                },
                "name": {
                    "type": "string",
                    "description": "ServiceAccount to use. A name is generated using the external-dns.fullname template if it is not set",
                    "default": ""
                },
                "annotations": {
                    "type": "object",
                    "description": "Additional Service Account annotations",
                    "default": {}
                },
                "automountServiceAccountToken": {
                    "type": "boolean",
                    "description": "Automount API credentials for a service account.",
                    "default": true
                }
            }
        },
        "rbac": {
            "type": "object",
            "properties": {
                "create": {
                    "type": "boolean",
                    "description": "Whether to create & use RBAC resources or not",
                    "default": true
                },
                "clusterRole": {
                    "type": "boolean",
                    "description": "Whether to create Cluster Role. When set to false creates a Role in `namespace`",
                    "default": true
                },
                "apiVersion": {
                    "type": "string",
                    "description": "Version of the RBAC API",
                    "default": "v1"
                },
                "pspEnabled": {
                    "type": "boolean",
                    "description": "Whether to create a PodSecurityPolicy. WARNING: PodSecurityPolicy is deprecated in Kubernetes v1.21 or later, unavailable in v1.25 or later",
                    "default": false
                }
            }
        },
        "containerSecurityContext": {
            "type": "object",
            "description": "Security context for the container",
            "default": {}
        },
        "podSecurityContext": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable pod security context",
                    "default": true
                },
                "fsGroup": {
                    "type": "number",
                    "description": "Group ID for the container",
                    "default": 1001
                },
                "runAsUser": {
                    "type": "number",
                    "description": "User ID for the container",
                    "default": 1001
                }
            }
        },
        "resources": {
            "type": "object",
            "properties": {
                "limits": {
                    "type": "object",
                    "description": "The resources limits for the container",
                    "default": {}
                },
                "requests": {
                    "type": "object",
                    "description": "The requested resources for the container",
                    "default": {}
                }
            }
        },
        "livenessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable livenessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for livenessProbe",
                    "default": 10
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for livenessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for livenessProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for livenessProbe",
                    "default": 2
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for livenessProbe",
                    "default": 1
                }
            }
        },
        "readinessProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable readinessProbe",
                    "default": true
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for readinessProbe",
                    "default": 5
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for readinessProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for readinessProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for readinessProbe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for readinessProbe",
                    "default": 1
                }
            }
        },
        "startupProbe": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable startupProbe",
                    "default": false
                },
                "initialDelaySeconds": {
                    "type": "number",
                    "description": "Initial delay seconds for startupProbe",
                    "default": 5
                },
                "periodSeconds": {
                    "type": "number",
                    "description": "Period seconds for startupProbe",
                    "default": 10
                },
                "timeoutSeconds": {
                    "type": "number",
                    "description": "Timeout seconds for startupProbe",
                    "default": 5
                },
                "failureThreshold": {
                    "type": "number",
                    "description": "Failure threshold for startupProbe",
                    "default": 6
                },
                "successThreshold": {
                    "type": "number",
                    "description": "Success threshold for startupProbe",
                    "default": 1
                }
            }
        },
        "customLivenessProbe": {
            "type": "object",
            "description": "Override default liveness probe",
            "default": {}
        },
        "customReadinessProbe": {
            "type": "object",
            "description": "Override default readiness probe",
            "default": {}
        },
        "customStartupProbe": {
            "type": "object",
            "description": "Override default startup probe",
            "default": {}
        },
        "extraVolumes": {
            "type": "array",
            "description": "A list of volumes to be added to the pod",
            "default": [],
            "items": {}
        },
        "extraVolumeMounts": {
            "type": "array",
            "description": "A list of volume mounts to be added to the pod",
            "default": [],
            "items": {}
        },
        "podDisruptionBudget": {
            "type": "object",
            "description": "Configure PodDisruptionBudget",
            "default": {}
        },
        "metrics": {
            "type": "object",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Enable prometheus to access external-dns metrics endpoint",
                    "default": false
                },
                "podAnnotations": {
                    "type": "object",
                    "description": "Annotations for enabling prometheus to access the metrics endpoint",
                    "default": {}
                },
                "serviceMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create ServiceMonitor object",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which Prometheus is running",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped",
                            "default": ""
                        },
                        "scrapeTimeout": {
                            "type": "string",
                            "description": "Timeout after which the scrape is ended",
                            "default": ""
                        },
                        "selector": {
                            "type": "object",
                            "description": "Additional labels for ServiceMonitor object",
                            "default": {}
                        },
                        "metricRelabelings": {
                            "type": "array",
                            "description": "Specify Metric Relabelings to add to the scrape endpoint",
                            "default": [],
                            "items": {}
                        },
                        "relabelings": {
                            "type": "array",
                            "description": "Prometheus relabeling rules",
                            "default": [],
                            "items": {}
                        },
                        "honorLabels": {
                            "type": "boolean",
                            "description": "Specify honorLabels parameter to add the scrape endpoint",
                            "default": false
                        },
                        "labels": {
                            "type": "object",
                            "description": "Used to pass Labels that are required by the installed Prometheus Operator",
                            "default": {}
                        },
                        "jobLabel": {
                            "type": "string",
                            "description": "The name of the label on the target service to use as the job name in prometheus.",
                            "default": ""
                        }
                    }
                },
                "googlePodMonitor": {
                    "type": "object",
                    "properties": {
                        "enabled": {
                            "type": "boolean",
                            "description": "Create Google Managed Prometheus PodMonitoring object",
                            "default": false
                        },
                        "namespace": {
                            "type": "string",
                            "description": "Namespace in which PodMonitoring created",
                            "default": ""
                        },
                        "interval": {
                            "type": "string",
                            "description": "Interval at which metrics should be scraped by Google Managed Prometheus",
                            "default": "60s"
                        },
                        "endpoint": {
                            "type": "string",
                            "description": "The endpoint for Google Managed Prometheus scraping the metrics",
                            "default": "/metrics"
                        }
                    }
                }
            }
        }
    }
}