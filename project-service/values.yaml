# Default values for project-service.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

nameOverride: ""
fullnameOverride: project

replicaCount: 1

image:
  repository: project
  tag: 251
  pullPolicy: Always

appConfig:
  port: 5066
  env: "dev"
  config_center_enabled: false
  config_center_base_url: http://common.utility:5062/
  srv_namespace: service_project

  tenant_id: 

  APP_NAME: "project"
  HOST: "0.0.0.0"
  PORT: "5064"
  WORKERS: "1"

  RDS_DB_HOST: "postgres.utility"
  RDS_DB_PORT: "5432"
  RDS_DB_USERNAME: "postgres"
  RDS_DB_NAME: "project"
  RDS_ECHO_SQL_QUERIES: "false"

  S3_HOST: "minio.minio"
  S3_PORT: "9000"
  S3_HTTPS_ENABLED: "false"
  S3_GATEWAY_ENABLED: "true"
  S3_BUCKET_ENCRYPTION_ENABLED: "false"
  S3_BUCKET_FOR_PROJECT_LOGOS: "project-logos"
  S3_PREFIX_FOR_PROJECT_IMAGE_URLS: "https://minio.dev.pilot.indocresearch.com/project-logos"
  OBJECT_STORAGE_PROVIDER: "gcp"

  ENVIRONMENT: "lab"
  GCP_PROJECT_ID: str = 'molten-precinct-465516-m1'
  GCP_CREDENTIAL_TYPE: str = 'service_account'
  GCP_SERVICE_ACCOUNT_CLIENT_EMAIL: str = 'testgcs-tenant-service-account@molten-precinct-465516-m1.iam.gserviceaccount.com'
  GCP_SERVICE_ACCOUNT_TOKEN_URI: str = 'https://oauth2.googleapis.com/token'

  OPEN_TELEMETRY_ENABLED: "false"
  OPEN_TELEMETRY_HOST: "simplest-agent.utility"
  OPEN_TELEMETRY_PORT: "6831"

  METADATA_SERVICE: "http://metadata.utility:5066"
  AUTH_SERVICE: "http://auth.utility:5061"

  ICON_SIZE_LIMIT: "16777216"

  SERVICE_CLIENT_TIMEOUT: "5"

  LOG_LEVEL_DEFAULT: "30"
  LOG_LEVEL_FILE: "30"
  LOG_LEVEL_STDOUT: "30"
  LOG_LEVEL_STDERR: "40"

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: 

container:
  port: 5064

service:
  type: ClusterIP
  port: 5064

podAnnotations: {}

deploymentAnnotations: {}

podSecurityContext: {}

securityContext: {}

imagePullSecrets: []

ingress:
  enabled: false

resources:
  limits:
    cpu: "1"
    memory: 500Mi
  requests:
    cpu: "10m"
    memory: 50Mi

autoscaling:
  enabled: false

nodeSelector: {}

tolerations: []

affinity: {}

extraEnv: {}

extraEnvYaml: {}

envSecrets: {}

readinessProbe:
  failureThreshold: 3
  initialDelaySeconds: 5
  periodSeconds: 10
  successThreshold: 1
  tcpSocket:
    port: 5064

livenessProbe:
  failureThreshold: 3
  httpGet:
    path: /v1/health/
    port: 5064
    scheme: HTTP
  periodSeconds: 10
  successThreshold: 1
  timeoutSeconds: 3

extraVolumeMounts: []

extraVolumes: []

updateStrategy:
  rollingUpdate:
    maxSurge: 1
    maxUnavailable: 33%
  type: RollingUpdate
