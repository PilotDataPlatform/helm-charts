apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ .Release.Name }}-cronjob
spec:
  schedule: "{{ .Values.cronjob.schedule }}"
  jobTemplate:
    spec:
      template:
        spec:
          initContainers:
          - name: vault-backup
            image: {{ .Values.cronjob.imageVault }}
            command:
              - /bin/sh
            args:
              - -ec
              - |
                apk update && apk add jq
                export VAULT_TOKEN=$(vault write auth/approle/login role_id=$VAULT_APPROLE_ROLE_ID secret_id=$VAULT_APPROLE_SECRET_ID -format=json |jq -r .auth.client_token);
                echo "vault kv get -format=json $MOUNT_POINT/$SECRET_PATH"
                vault kv get -format=json $MOUNT_POINT/$SECRET_PATH > /backup/vault-backup-`date +%Y%m%d%H%M`.json


            env:
              {{- range $key, $val := .Values.env }}
              - name: "{{ $key }}"
                value: "{{ $val }}"
              {{- end }}
            volumeMounts:
            - mountPath: /backup
              name: backup-dir
          - name: consul-snapshot
            image: {{ .Values.cronjob.imageConsul }}
            command:
              - /bin/sh
              - -ec
              - |
                consul snapshot save /backup/consul-backup-`date +%Y%m%d%H%M`.snap
            env:
              {{- range $key, $val := .Values.env }}
              - name: "{{ $key }}"
                value: "{{ $val }}"
              {{- end }}
            volumeMounts:
            - mountPath: /backup
              name: backup-dir
          containers:
          - name: upload
            image: {{ .Values.cronjob.imageUpload }}
            command:
              - /bin/sh
              - -ec
              - |
                ls -trl /backup 
                # Check if the backup files exist or empty
                VAULT_BACKUP_FILE=/backup/$(ls /backup|grep vault)
                CONSUL_BACKUP_FILE=/backup/$(ls /backup|grep consul)
                
                if [ -f "$VAULT_BACKUP_FILE" ] && [ -f "$CONSUL_BACKUP_FILE" ] && [ ! -s "$VAULT_BACKUP_FILE" ] && [ ! -s "$CONSUL_BACKUP_FILE" ]; then echo "Files $VAULT_BACKUP_FILE and $CONSUL_BACKUP_FILE exist but have size 0" && exit 1; elif [ -f "$VAULT_BACKUP_FILE" ] && [ -f "$CONSUL_BACKUP_FILE" ]; then echo "Files $VAULT_BACKUP_FILE and $CONSUL_BACKUP_FILE exist and have size greater than 0"; else echo "One or both of the files $VAULT_BACKUP_FILE and $CONSUL_BACKUP_FILE do not exist" && exit 2; fi
                azcopy copy /backup/vault*  "$STORAGE_ACCESS_TOKEN_URL" 
                azcopy copy /backup/consul*  "$STORAGE_ACCESS_TOKEN_URL" 

            env:
              {{- range $key, $val := .Values.env }}
              - name: "{{ $key }}"
                value: "{{ $val }}"
              {{- end }}
            imagePullPolicy: Always
            volumeMounts:
            - mountPath: /backup
              name: backup-dir
          restartPolicy: OnFailure
          volumes:
          - name: backup-dir
            emptyDir: {}
      backoffLimit: 3

